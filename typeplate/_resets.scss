// .x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x //
//
// $Typeplate Styles
//
// .x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x //

// $Styles $Globals
// -------------------------------------//

html {
    @if $custom-font-family {
        font: $font-weight #{$font-size + "%"}/#{$line-height} $custom-font-family, $font-family;
    } @else {
        font: $font-weight #{$font-size + "%"}/#{$line-height} $font-family;
    }
}

body {
    // Ala Trent Walton
    @include css-hyphens(auto);

    // normal: Indicates that lines may only break at normal word break points.
    // break-word : Indicates that normally unbreakable words may be broken at ...
    // arbitrary points if there are no otherwise acceptable break points in the line.
    @extend %breakword;
    color: $body-copy-color;
}

small {
    font-size: $small-print-size;
}


// $Styles $Headings
// -------------------------------------//

// Extend included classes on any element of your
// choosing for adjusting type based on the scale
// provided.
// Special Props to Harry Roberts for this trick.

// For example:

// <h6 class="giga">Awesome Headline</h6>
// <p class="tera">a story about a dude</p>

// Our Type Scale is as follows with px fallbacks
// for IE 6-8 as they do not understand REM units.
//
// 18, 21, 24, 36, 48, 60, 72, 90, 117

// styles for all headings, in the style of @csswizardry
%hN {
    text-rendering: optimizeLegibility; // voodoo to enable ligatures and kerning
    line-height: 1; // this fixes huge spaces when a heading wraps onto two lines
    margin-top: 0;
}

// Multi-dimensional array, where:
// the first value is the name of the class
// and the second value is the variable for the size
$sizes: tera $tera, giga $giga, mega $mega, alpha $alpha, beta $beta, gamma $gamma, delta $delta, epsilon $epsilon, zeta $zeta;

// Sass loop to associate h1-h6 tags with their appropriate greek
// heading based on a modular scale.
// for each size in the scale, create a class
@each $size in $sizes {
    .#{nth($size, 1)} {
        @include type-scale(nth($size, 2), $font-base, '#{$type-scale-unit-value}', $measure);
    }
}

// associate h1-h6 tags with their appropriate greek heading
h1 {
    @extend .alpha;
    @extend %hN;
}

h2 {
    @extend .beta;
    @extend %hN;
}

h3 {
    @extend .gamma;
    @extend %hN;
}

h4 {
    @extend .delta;
    @extend %hN;
}

h5 {
    @extend .epsilon;
    @extend %hN;
}

h6 {
    @extend .zeta;
    @extend %hN;
}


// $Styles $Parargraphs
// -------------------------------------//

p {
    margin: auto auto $indent-val;

    // Conditonal Check For Paragraph Styling
    @if $paragraph-vertical-whitespace == false {
        & + p {
            //siblings indentation
            text-indent: $indent-val;
            margin-top: -$indent-val;
        }
    }
}


// $Styles $Hyphenation
// -------------------------------------//
// http://meyerweb.com/eric/thoughts/2012/12/17/where-to-avoid-css-hyphenation

abbr,
acronym,
blockquote,
code,
dir,
kbd,
listing,
plaintext,
q,
samp,
tt,
var,
xmp {
    @include css-hyphens(none);
}


// $Styles $Codeblocks
// -------------------------------------//

pre code {
    @extend %normal-wrap;
    @include white-space(pre-wrap);
}

pre {
    @include white-space(pre);
}

code {
    @include white-space(pre);
    font-family: monospace;
}


// $Styles $Smallcaps
// -------------------------------------//
/**
 * Abbreviations Markup
 *
    <abbr title="hyper text markup language">HMTL</abbr>
 *
 * Extend this object into your markup.
 *
 */
abbr {
    @include smallcaps($small-caps-color, $small-caps-weight);
    &[title]:hover {
        cursor: help;
    }
}


// $Styles $Headings-Color
// -------------------------------------//

h1,
h2,
h3,
h4,
h5,
h6 {
    color: $heading-color;
}
